// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/updater/updater.proto

package updater

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesUpdaterPluginClient is the client API for FilesUpdaterPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesUpdaterPluginClient interface {
	Init(ctx context.Context, in *FilesUpdaterInit_Request, opts ...grpc.CallOption) (*FilesUpdaterInit_Response, error)
	Name(ctx context.Context, in *FilesUpdaterName_Request, opts ...grpc.CallOption) (*FilesUpdaterName_Response, error)
	Version(ctx context.Context, in *FilesUpdaterVersion_Request, opts ...grpc.CallOption) (*FilesUpdaterVersion_Response, error)
	ForFiles(ctx context.Context, in *FilesUpdaterForFiles_Request, opts ...grpc.CallOption) (*FilesUpdaterForFiles_Response, error)
	Apply(ctx context.Context, in *FilesUpdaterApply_Request, opts ...grpc.CallOption) (*FilesUpdaterApply_Response, error)
}

type filesUpdaterPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesUpdaterPluginClient(cc grpc.ClientConnInterface) FilesUpdaterPluginClient {
	return &filesUpdaterPluginClient{cc}
}

func (c *filesUpdaterPluginClient) Init(ctx context.Context, in *FilesUpdaterInit_Request, opts ...grpc.CallOption) (*FilesUpdaterInit_Response, error) {
	out := new(FilesUpdaterInit_Response)
	err := c.cc.Invoke(ctx, "/FilesUpdaterPlugin/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesUpdaterPluginClient) Name(ctx context.Context, in *FilesUpdaterName_Request, opts ...grpc.CallOption) (*FilesUpdaterName_Response, error) {
	out := new(FilesUpdaterName_Response)
	err := c.cc.Invoke(ctx, "/FilesUpdaterPlugin/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesUpdaterPluginClient) Version(ctx context.Context, in *FilesUpdaterVersion_Request, opts ...grpc.CallOption) (*FilesUpdaterVersion_Response, error) {
	out := new(FilesUpdaterVersion_Response)
	err := c.cc.Invoke(ctx, "/FilesUpdaterPlugin/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesUpdaterPluginClient) ForFiles(ctx context.Context, in *FilesUpdaterForFiles_Request, opts ...grpc.CallOption) (*FilesUpdaterForFiles_Response, error) {
	out := new(FilesUpdaterForFiles_Response)
	err := c.cc.Invoke(ctx, "/FilesUpdaterPlugin/ForFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesUpdaterPluginClient) Apply(ctx context.Context, in *FilesUpdaterApply_Request, opts ...grpc.CallOption) (*FilesUpdaterApply_Response, error) {
	out := new(FilesUpdaterApply_Response)
	err := c.cc.Invoke(ctx, "/FilesUpdaterPlugin/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesUpdaterPluginServer is the server API for FilesUpdaterPlugin service.
// All implementations must embed UnimplementedFilesUpdaterPluginServer
// for forward compatibility
type FilesUpdaterPluginServer interface {
	Init(context.Context, *FilesUpdaterInit_Request) (*FilesUpdaterInit_Response, error)
	Name(context.Context, *FilesUpdaterName_Request) (*FilesUpdaterName_Response, error)
	Version(context.Context, *FilesUpdaterVersion_Request) (*FilesUpdaterVersion_Response, error)
	ForFiles(context.Context, *FilesUpdaterForFiles_Request) (*FilesUpdaterForFiles_Response, error)
	Apply(context.Context, *FilesUpdaterApply_Request) (*FilesUpdaterApply_Response, error)
	mustEmbedUnimplementedFilesUpdaterPluginServer()
}

// UnimplementedFilesUpdaterPluginServer must be embedded to have forward compatible implementations.
type UnimplementedFilesUpdaterPluginServer struct {
}

func (UnimplementedFilesUpdaterPluginServer) Init(context.Context, *FilesUpdaterInit_Request) (*FilesUpdaterInit_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedFilesUpdaterPluginServer) Name(context.Context, *FilesUpdaterName_Request) (*FilesUpdaterName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedFilesUpdaterPluginServer) Version(context.Context, *FilesUpdaterVersion_Request) (*FilesUpdaterVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedFilesUpdaterPluginServer) ForFiles(context.Context, *FilesUpdaterForFiles_Request) (*FilesUpdaterForFiles_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForFiles not implemented")
}
func (UnimplementedFilesUpdaterPluginServer) Apply(context.Context, *FilesUpdaterApply_Request) (*FilesUpdaterApply_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedFilesUpdaterPluginServer) mustEmbedUnimplementedFilesUpdaterPluginServer() {}

// UnsafeFilesUpdaterPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesUpdaterPluginServer will
// result in compilation errors.
type UnsafeFilesUpdaterPluginServer interface {
	mustEmbedUnimplementedFilesUpdaterPluginServer()
}

func RegisterFilesUpdaterPluginServer(s grpc.ServiceRegistrar, srv FilesUpdaterPluginServer) {
	s.RegisterService(&FilesUpdaterPlugin_ServiceDesc, srv)
}

func _FilesUpdaterPlugin_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesUpdaterInit_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesUpdaterPluginServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilesUpdaterPlugin/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesUpdaterPluginServer).Init(ctx, req.(*FilesUpdaterInit_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesUpdaterPlugin_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesUpdaterName_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesUpdaterPluginServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilesUpdaterPlugin/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesUpdaterPluginServer).Name(ctx, req.(*FilesUpdaterName_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesUpdaterPlugin_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesUpdaterVersion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesUpdaterPluginServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilesUpdaterPlugin/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesUpdaterPluginServer).Version(ctx, req.(*FilesUpdaterVersion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesUpdaterPlugin_ForFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesUpdaterForFiles_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesUpdaterPluginServer).ForFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilesUpdaterPlugin/ForFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesUpdaterPluginServer).ForFiles(ctx, req.(*FilesUpdaterForFiles_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesUpdaterPlugin_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesUpdaterApply_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesUpdaterPluginServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FilesUpdaterPlugin/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesUpdaterPluginServer).Apply(ctx, req.(*FilesUpdaterApply_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesUpdaterPlugin_ServiceDesc is the grpc.ServiceDesc for FilesUpdaterPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesUpdaterPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FilesUpdaterPlugin",
	HandlerType: (*FilesUpdaterPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _FilesUpdaterPlugin_Init_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _FilesUpdaterPlugin_Name_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _FilesUpdaterPlugin_Version_Handler,
		},
		{
			MethodName: "ForFiles",
			Handler:    _FilesUpdaterPlugin_ForFiles_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _FilesUpdaterPlugin_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/updater/updater.proto",
}
