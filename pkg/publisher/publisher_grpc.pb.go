// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/publisher/publisher.proto

package publisher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublisherPluginClient is the client API for PublisherPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherPluginClient interface {
	Init(ctx context.Context, in *PublisherInit_Request, opts ...grpc.CallOption) (*PublisherInit_Response, error)
	Name(ctx context.Context, in *PublisherName_Request, opts ...grpc.CallOption) (*PublisherName_Response, error)
	Version(ctx context.Context, in *PublisherVersion_Request, opts ...grpc.CallOption) (*PublisherVersion_Response, error)
	Publish(ctx context.Context, in *PublisherPublish_Request, opts ...grpc.CallOption) (*PublisherPublish_Response, error)
}

type publisherPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherPluginClient(cc grpc.ClientConnInterface) PublisherPluginClient {
	return &publisherPluginClient{cc}
}

func (c *publisherPluginClient) Init(ctx context.Context, in *PublisherInit_Request, opts ...grpc.CallOption) (*PublisherInit_Response, error) {
	out := new(PublisherInit_Response)
	err := c.cc.Invoke(ctx, "/PublisherPlugin/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherPluginClient) Name(ctx context.Context, in *PublisherName_Request, opts ...grpc.CallOption) (*PublisherName_Response, error) {
	out := new(PublisherName_Response)
	err := c.cc.Invoke(ctx, "/PublisherPlugin/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherPluginClient) Version(ctx context.Context, in *PublisherVersion_Request, opts ...grpc.CallOption) (*PublisherVersion_Response, error) {
	out := new(PublisherVersion_Response)
	err := c.cc.Invoke(ctx, "/PublisherPlugin/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherPluginClient) Publish(ctx context.Context, in *PublisherPublish_Request, opts ...grpc.CallOption) (*PublisherPublish_Response, error) {
	out := new(PublisherPublish_Response)
	err := c.cc.Invoke(ctx, "/PublisherPlugin/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherPluginServer is the server API for PublisherPlugin service.
// All implementations must embed UnimplementedPublisherPluginServer
// for forward compatibility
type PublisherPluginServer interface {
	Init(context.Context, *PublisherInit_Request) (*PublisherInit_Response, error)
	Name(context.Context, *PublisherName_Request) (*PublisherName_Response, error)
	Version(context.Context, *PublisherVersion_Request) (*PublisherVersion_Response, error)
	Publish(context.Context, *PublisherPublish_Request) (*PublisherPublish_Response, error)
	mustEmbedUnimplementedPublisherPluginServer()
}

// UnimplementedPublisherPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPublisherPluginServer struct {
}

func (UnimplementedPublisherPluginServer) Init(context.Context, *PublisherInit_Request) (*PublisherInit_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedPublisherPluginServer) Name(context.Context, *PublisherName_Request) (*PublisherName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedPublisherPluginServer) Version(context.Context, *PublisherVersion_Request) (*PublisherVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedPublisherPluginServer) Publish(context.Context, *PublisherPublish_Request) (*PublisherPublish_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPublisherPluginServer) mustEmbedUnimplementedPublisherPluginServer() {}

// UnsafePublisherPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherPluginServer will
// result in compilation errors.
type UnsafePublisherPluginServer interface {
	mustEmbedUnimplementedPublisherPluginServer()
}

func RegisterPublisherPluginServer(s grpc.ServiceRegistrar, srv PublisherPluginServer) {
	s.RegisterService(&PublisherPlugin_ServiceDesc, srv)
}

func _PublisherPlugin_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherInit_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherPluginServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublisherPlugin/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherPluginServer).Init(ctx, req.(*PublisherInit_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherPlugin_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherName_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherPluginServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublisherPlugin/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherPluginServer).Name(ctx, req.(*PublisherName_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherPlugin_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherVersion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherPluginServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublisherPlugin/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherPluginServer).Version(ctx, req.(*PublisherVersion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherPlugin_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherPublish_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherPluginServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PublisherPlugin/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherPluginServer).Publish(ctx, req.(*PublisherPublish_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PublisherPlugin_ServiceDesc is the grpc.ServiceDesc for PublisherPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublisherPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PublisherPlugin",
	HandlerType: (*PublisherPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _PublisherPlugin_Init_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _PublisherPlugin_Name_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _PublisherPlugin_Version_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _PublisherPlugin_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/publisher/publisher.proto",
}
