// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/analyzer/commit_analyzer.proto

package analyzer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommitAnalyzerPluginClient is the client API for CommitAnalyzerPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitAnalyzerPluginClient interface {
	Init(ctx context.Context, in *CommitAnalyzerInit_Request, opts ...grpc.CallOption) (*CommitAnalyzerInit_Response, error)
	Name(ctx context.Context, in *CommitAnalyzerName_Request, opts ...grpc.CallOption) (*CommitAnalyzerName_Response, error)
	Version(ctx context.Context, in *CommitAnalyzerVersion_Request, opts ...grpc.CallOption) (*CommitAnalyzerVersion_Response, error)
	Analyze(ctx context.Context, in *AnalyzeCommits_Request, opts ...grpc.CallOption) (*AnalyzeCommits_Response, error)
}

type commitAnalyzerPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitAnalyzerPluginClient(cc grpc.ClientConnInterface) CommitAnalyzerPluginClient {
	return &commitAnalyzerPluginClient{cc}
}

func (c *commitAnalyzerPluginClient) Init(ctx context.Context, in *CommitAnalyzerInit_Request, opts ...grpc.CallOption) (*CommitAnalyzerInit_Response, error) {
	out := new(CommitAnalyzerInit_Response)
	err := c.cc.Invoke(ctx, "/CommitAnalyzerPlugin/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitAnalyzerPluginClient) Name(ctx context.Context, in *CommitAnalyzerName_Request, opts ...grpc.CallOption) (*CommitAnalyzerName_Response, error) {
	out := new(CommitAnalyzerName_Response)
	err := c.cc.Invoke(ctx, "/CommitAnalyzerPlugin/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitAnalyzerPluginClient) Version(ctx context.Context, in *CommitAnalyzerVersion_Request, opts ...grpc.CallOption) (*CommitAnalyzerVersion_Response, error) {
	out := new(CommitAnalyzerVersion_Response)
	err := c.cc.Invoke(ctx, "/CommitAnalyzerPlugin/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitAnalyzerPluginClient) Analyze(ctx context.Context, in *AnalyzeCommits_Request, opts ...grpc.CallOption) (*AnalyzeCommits_Response, error) {
	out := new(AnalyzeCommits_Response)
	err := c.cc.Invoke(ctx, "/CommitAnalyzerPlugin/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitAnalyzerPluginServer is the server API for CommitAnalyzerPlugin service.
// All implementations must embed UnimplementedCommitAnalyzerPluginServer
// for forward compatibility
type CommitAnalyzerPluginServer interface {
	Init(context.Context, *CommitAnalyzerInit_Request) (*CommitAnalyzerInit_Response, error)
	Name(context.Context, *CommitAnalyzerName_Request) (*CommitAnalyzerName_Response, error)
	Version(context.Context, *CommitAnalyzerVersion_Request) (*CommitAnalyzerVersion_Response, error)
	Analyze(context.Context, *AnalyzeCommits_Request) (*AnalyzeCommits_Response, error)
	mustEmbedUnimplementedCommitAnalyzerPluginServer()
}

// UnimplementedCommitAnalyzerPluginServer must be embedded to have forward compatible implementations.
type UnimplementedCommitAnalyzerPluginServer struct {
}

func (UnimplementedCommitAnalyzerPluginServer) Init(context.Context, *CommitAnalyzerInit_Request) (*CommitAnalyzerInit_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedCommitAnalyzerPluginServer) Name(context.Context, *CommitAnalyzerName_Request) (*CommitAnalyzerName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedCommitAnalyzerPluginServer) Version(context.Context, *CommitAnalyzerVersion_Request) (*CommitAnalyzerVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCommitAnalyzerPluginServer) Analyze(context.Context, *AnalyzeCommits_Request) (*AnalyzeCommits_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedCommitAnalyzerPluginServer) mustEmbedUnimplementedCommitAnalyzerPluginServer() {}

// UnsafeCommitAnalyzerPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitAnalyzerPluginServer will
// result in compilation errors.
type UnsafeCommitAnalyzerPluginServer interface {
	mustEmbedUnimplementedCommitAnalyzerPluginServer()
}

func RegisterCommitAnalyzerPluginServer(s grpc.ServiceRegistrar, srv CommitAnalyzerPluginServer) {
	s.RegisterService(&CommitAnalyzerPlugin_ServiceDesc, srv)
}

func _CommitAnalyzerPlugin_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitAnalyzerInit_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitAnalyzerPluginServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommitAnalyzerPlugin/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitAnalyzerPluginServer).Init(ctx, req.(*CommitAnalyzerInit_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitAnalyzerPlugin_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitAnalyzerName_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitAnalyzerPluginServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommitAnalyzerPlugin/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitAnalyzerPluginServer).Name(ctx, req.(*CommitAnalyzerName_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitAnalyzerPlugin_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitAnalyzerVersion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitAnalyzerPluginServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommitAnalyzerPlugin/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitAnalyzerPluginServer).Version(ctx, req.(*CommitAnalyzerVersion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitAnalyzerPlugin_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeCommits_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitAnalyzerPluginServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommitAnalyzerPlugin/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitAnalyzerPluginServer).Analyze(ctx, req.(*AnalyzeCommits_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitAnalyzerPlugin_ServiceDesc is the grpc.ServiceDesc for CommitAnalyzerPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitAnalyzerPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommitAnalyzerPlugin",
	HandlerType: (*CommitAnalyzerPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _CommitAnalyzerPlugin_Init_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _CommitAnalyzerPlugin_Name_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _CommitAnalyzerPlugin_Version_Handler,
		},
		{
			MethodName: "Analyze",
			Handler:    _CommitAnalyzerPlugin_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/analyzer/commit_analyzer.proto",
}
