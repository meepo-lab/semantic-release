// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/condition/ci_condition.proto

package condition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CIConditionPluginClient is the client API for CIConditionPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CIConditionPluginClient interface {
	Name(ctx context.Context, in *CIName_Request, opts ...grpc.CallOption) (*CIName_Response, error)
	Version(ctx context.Context, in *CIVersion_Request, opts ...grpc.CallOption) (*CIVersion_Response, error)
	RunCondition(ctx context.Context, in *RunCondition_Request, opts ...grpc.CallOption) (*RunCondition_Response, error)
	GetCurrentBranch(ctx context.Context, in *GetCurrentBranch_Request, opts ...grpc.CallOption) (*GetCurrentBranch_Response, error)
	GetCurrentSHA(ctx context.Context, in *GetCurrentSHA_Request, opts ...grpc.CallOption) (*GetCurrentSHA_Response, error)
}

type cIConditionPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewCIConditionPluginClient(cc grpc.ClientConnInterface) CIConditionPluginClient {
	return &cIConditionPluginClient{cc}
}

func (c *cIConditionPluginClient) Name(ctx context.Context, in *CIName_Request, opts ...grpc.CallOption) (*CIName_Response, error) {
	out := new(CIName_Response)
	err := c.cc.Invoke(ctx, "/CIConditionPlugin/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIConditionPluginClient) Version(ctx context.Context, in *CIVersion_Request, opts ...grpc.CallOption) (*CIVersion_Response, error) {
	out := new(CIVersion_Response)
	err := c.cc.Invoke(ctx, "/CIConditionPlugin/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIConditionPluginClient) RunCondition(ctx context.Context, in *RunCondition_Request, opts ...grpc.CallOption) (*RunCondition_Response, error) {
	out := new(RunCondition_Response)
	err := c.cc.Invoke(ctx, "/CIConditionPlugin/RunCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIConditionPluginClient) GetCurrentBranch(ctx context.Context, in *GetCurrentBranch_Request, opts ...grpc.CallOption) (*GetCurrentBranch_Response, error) {
	out := new(GetCurrentBranch_Response)
	err := c.cc.Invoke(ctx, "/CIConditionPlugin/GetCurrentBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIConditionPluginClient) GetCurrentSHA(ctx context.Context, in *GetCurrentSHA_Request, opts ...grpc.CallOption) (*GetCurrentSHA_Response, error) {
	out := new(GetCurrentSHA_Response)
	err := c.cc.Invoke(ctx, "/CIConditionPlugin/GetCurrentSHA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CIConditionPluginServer is the server API for CIConditionPlugin service.
// All implementations must embed UnimplementedCIConditionPluginServer
// for forward compatibility
type CIConditionPluginServer interface {
	Name(context.Context, *CIName_Request) (*CIName_Response, error)
	Version(context.Context, *CIVersion_Request) (*CIVersion_Response, error)
	RunCondition(context.Context, *RunCondition_Request) (*RunCondition_Response, error)
	GetCurrentBranch(context.Context, *GetCurrentBranch_Request) (*GetCurrentBranch_Response, error)
	GetCurrentSHA(context.Context, *GetCurrentSHA_Request) (*GetCurrentSHA_Response, error)
	mustEmbedUnimplementedCIConditionPluginServer()
}

// UnimplementedCIConditionPluginServer must be embedded to have forward compatible implementations.
type UnimplementedCIConditionPluginServer struct {
}

func (UnimplementedCIConditionPluginServer) Name(context.Context, *CIName_Request) (*CIName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedCIConditionPluginServer) Version(context.Context, *CIVersion_Request) (*CIVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCIConditionPluginServer) RunCondition(context.Context, *RunCondition_Request) (*RunCondition_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCondition not implemented")
}
func (UnimplementedCIConditionPluginServer) GetCurrentBranch(context.Context, *GetCurrentBranch_Request) (*GetCurrentBranch_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentBranch not implemented")
}
func (UnimplementedCIConditionPluginServer) GetCurrentSHA(context.Context, *GetCurrentSHA_Request) (*GetCurrentSHA_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSHA not implemented")
}
func (UnimplementedCIConditionPluginServer) mustEmbedUnimplementedCIConditionPluginServer() {}

// UnsafeCIConditionPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CIConditionPluginServer will
// result in compilation errors.
type UnsafeCIConditionPluginServer interface {
	mustEmbedUnimplementedCIConditionPluginServer()
}

func RegisterCIConditionPluginServer(s grpc.ServiceRegistrar, srv CIConditionPluginServer) {
	s.RegisterService(&CIConditionPlugin_ServiceDesc, srv)
}

func _CIConditionPlugin_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIName_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIConditionPluginServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIConditionPlugin/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIConditionPluginServer).Name(ctx, req.(*CIName_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIConditionPlugin_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIVersion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIConditionPluginServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIConditionPlugin/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIConditionPluginServer).Version(ctx, req.(*CIVersion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIConditionPlugin_RunCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCondition_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIConditionPluginServer).RunCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIConditionPlugin/RunCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIConditionPluginServer).RunCondition(ctx, req.(*RunCondition_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIConditionPlugin_GetCurrentBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentBranch_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIConditionPluginServer).GetCurrentBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIConditionPlugin/GetCurrentBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIConditionPluginServer).GetCurrentBranch(ctx, req.(*GetCurrentBranch_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CIConditionPlugin_GetCurrentSHA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSHA_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CIConditionPluginServer).GetCurrentSHA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CIConditionPlugin/GetCurrentSHA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CIConditionPluginServer).GetCurrentSHA(ctx, req.(*GetCurrentSHA_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CIConditionPlugin_ServiceDesc is the grpc.ServiceDesc for CIConditionPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CIConditionPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CIConditionPlugin",
	HandlerType: (*CIConditionPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _CIConditionPlugin_Name_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _CIConditionPlugin_Version_Handler,
		},
		{
			MethodName: "RunCondition",
			Handler:    _CIConditionPlugin_RunCondition_Handler,
		},
		{
			MethodName: "GetCurrentBranch",
			Handler:    _CIConditionPlugin_GetCurrentBranch_Handler,
		},
		{
			MethodName: "GetCurrentSHA",
			Handler:    _CIConditionPlugin_GetCurrentSHA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/condition/ci_condition.proto",
}
